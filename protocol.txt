All messages are prefixed with an 8-bit opcode. The opcode determines which data will follow it.
After opcode located size of message (int_32).
All multi-byte values are transmitted in big-endian.
To chat just send and receive websocket strings.

Client -> Server protocol
Opcode 0x00 (Ping)
	No data
Opcode 0x01 (Join world)
	- ASCII string (world name)
Opcode 0x02 (Request chunk)
	- int_32 (Chunk X)
	- int_32 (Chunk Y)
Opcode 0x03 (Player update)
	- int_32 (Player X)
	- int_32 (Player Y)
	- uint_16 (Player RGB565)
	- uint_8 (Player tool)
Opcode 0x04 (Set pixel)
	- int_32 (Pixel X)
	- int_32 (Pixel Y)
	- uint_16 (Pixel RGB565)
Opcode 0xFF (Exit world)
	No data
	
Server -> Client protocol
Opcode 0x00 (Pong)
	No data
Opcode 0x01 (Response to a client 0x01)
	- int_32 (Player ID)
Opcode 0x02 (Response to a client 0x02)
	- int_32 (Chunk X)
	- int_32 (Chunk Y)
	- uint_32 (compressed chunk data length)
	- compressed chunk data (Compressed chunk data, 2 bytes per uncompressed pixel (RGB565), 256 * 256 pixels)
Opcode 0x03 (World updates)
	- uint_8 (Number of player updates)
	For each player update:
		- int_32 (Player ID)
		- int_32 (Player X)
		- int_32 (Player Y)
		- uint_16 (Player RGB565)
		- uint_8 (Player tool)
	- uint_16 (Number of pixel updates)
	For each player update:
		- int_32 (Pixel X)
		- int_32 (Pixel Y)
		- uint_16 (Pixel RGB565)
	- uint_8 (Number of player disconnects)
	For each player update:
		- int_32 (Player ID)
Opcode 0x04 (Teleport player) // temporary
	- int_32 (Pixel X)
	- int_32 (Pixel Y)
Opcode 0x05 (Admin mode enabled)
	No data
